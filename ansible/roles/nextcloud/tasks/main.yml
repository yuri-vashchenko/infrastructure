- name: Include vault
  ansible.builtin.include_vars: vault.yml

- name: Include vault
  ansible.builtin.include_vars: "{{ role_path }}/../mariadb/vars/vault.yml"

- name: Include variables
  ansible.builtin.include_vars:
    file: defaults/meta.yml

- name: Install packages
  ansible.builtin.package:
    name:
      - libmysqlclient-dev
      - mysql-client
    state: present
  become: true

- name: Create directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "{{ docker_compose_directory_mask }}"
    owner: "{{ docker_user.name }}"
    group: "{{ docker_user.name }}"
  loop: "{{ nextcloud_dirs }}"
  become: true

- name: Create mariadb database for nextcloud
  community.mysql.mysql_db:
    name: nextcloud
    state: present
    login_host: 127.0.0.1
    login_port: 3306
    login_user: root
    login_password: "{{ mariadb_root_password }}"

- name: Create mariadb user for nextcloud
  community.mysql.mysql_user:
    name: "{{ nextcloud_mariadb_user }}"
    password: "{{ nextcloud_mariadb_password }}"
    host: nextcloud.mariadb
    priv:
      # '*.*': ALL
      'nextcloud.*': ALL
    state: present
    login_host: 127.0.0.1
    login_port: 3306
    login_user: root
    login_password: "{{ mariadb_root_password }}"

# - name: Copy config file
#   when: enable_nextcloud | default(false)
#   ansible.builtin.template:
#     src: files/config.php.j2
#     dest: "{{ nextcloud_config_dir }}/config.ansible.php"
#     mode: "{{ docker_compose_file_mask }}"
#     owner: "{{ docker_user.name }}"
#     group: "{{ docker_user.name }}"
#   become: true

# - name: Check that the config.php file exists
#   ansible.builtin.stat:
#     # path: "{{ nextcloud_config_dir_long }}/config.php"
#     path: "{{ nextcloud_config_dir }}/config.php"
#   register: stat_result

# - name: Create config.php file if it doesnt exist already
#   ansible.builtin.file:
#     path: "{{ nextcloud_config_filename }}"
#     mode: "{{ docker_compose_file_mask }}"
#     owner: "{{ docker_user.name }}"
#     group: "{{ docker_user.name }}"
#     state: touch
#   when: not stat_result.stat.exists
#   become: true

# - name: Merge existing config with new one
#   ansible.builtin.shell:
#     cmd: diff --ignore-all-space --line-format %L
#       {{ nextcloud_config_filename }} {{ nextcloud_config_dir }}/config.ansible.php > {{ nextcloud_config_filename }}.new
#     # cmd: diff --ignore-all-space --line-format %L
#     #   {{ nextcloud_config_filename }} {{ nextcloud_config_dir_long }}/config.ansible.php > {{ nextcloud_config_filename }}.new
#     creates: "{{ nextcloud_config_filename }}.new"
#   register: result
#   changed_when: result.rc == 1
#   failed_when: result.rc == 2
#   become: true

# - name: Rename config.php.new to config.php
#   ansible.builtin.copy:
#     remote_src: true
#     src: "{{ nextcloud_config_filename }}.new"
#     dest: "{{ nextcloud_config_filename }}"
#     mode: "{{ docker_compose_file_mask }}"
#     owner: "{{ docker_user.name }}"
#     group: "{{ docker_user.name }}"
#   when: result.rc == 1
#   become: true

# - name: Delete config.php.new
#   ansible.builtin.file:
#     path: "{{ nextcloud_config_filename }}.new"
#     state: absent
#   become: true

- name: Make sure the nextcloud container is created and running
  when: enable_nextcloud | default(false)
  community.docker.docker_container:
    name: "{{ container_name }}"
    image: nextcloud
    # image: lscr.io/linuxserver/nextcloud:{{ nextcloud_version }}
    pull: true
    env:
      PUID: "3000"
      PGID: "3000"
      TZ: "{{ timezone }}"
      # -------------------------------
      MYSQL_PASSWORD: "{{ nextcloud_mariadb_password }}"
      MYSQL_DATABASE: nextcloud
      MYSQL_USER: "{{ nextcloud_mariadb_user }}"
      MYSQL_HOST: mariadb
      NEXTCLOUD_ADMIN_USER: "{{ nextcloud_admin_user }}"
      NEXTCLOUD_ADMIN_PASSWORD: "{{ nextcloud_admin_password }}"
      NEXTCLOUD_TRUSTED_DOMAINS: "{{ host }},nextcloud.{{ host }}"
      TRUSTED_PROXIES: "{{ home_lan_base }}.{{ traefik_ip }}"
      OVERWRITEPROTOCOL: https
      OVERWRITECLIURL: https://nextcloud.{{ host }}
      # -------------------------------
    networks:
      - name: traefik
      - name: mariadb
    links:
      - mariadb
    hostname: server-nextcloud
    state: started
    volumes:
      # - "{{ nextcloud_config_dir }}:/var/www/html/config"
      # - "{{ nextcloud_data_dir }}:/var/www/html/data"
      - "{{ nextcloud_dir }}:/var/www/html"
    labels:
      traefik.enable: "true"
      traefik.docker.network: traefik
      # routers // ui
      traefik.http.routers.nextcloud-web.entrypoints: web
      traefik.http.routers.nextcloud-web.rule: Host(`{{ container_name }}.{{ host }}`)
      traefik.http.routers.nextcloud-web-secure.entrypoints: web-secure
      traefik.http.routers.nextcloud-web-secure.rule: Host(`{{ container_name }}.{{ host }}`)
      traefik.http.routers.nextcloud-web-secure.tls: "true"
      traefik.http.routers.nextcloud-web-secure.service: nextcloud
      # services
      traefik.http.services.nextcloud.loadbalancer.server.port: "80"
      # middlewares
      traefik.http.middlewares.nextcloud-redirect-to-https.redirectscheme.scheme: https
      traefik.http.middlewares.nextcloud-redirect-to-https.redirectscheme.permanent: "true"
      traefik.http.middlewares.nextcloud-ratelimit.ratelimit.average: "5"
      traefik.http.middlewares.nextcloud-ratelimit.ratelimit.burst: "1000"
      traefik.http.middlewares.nextcloud-compress.compress: "true"

      traefik.http.middlewares.nextcloud-headers.headers.customFrameOptionsValue: SAMEORIGIN
      traefik.http.middlewares.nextcloud-headers.headers.framedeny: "true"
      traefik.http.middlewares.nextcloud-headers.headers.sslredirect: "true"
      traefik.http.middlewares.nextcloud-headers.headers.STSIncludeSubdomains: "true"
      traefik.http.middlewares.nextcloud-headers.headers.STSPreload: "true"
      traefik.http.middlewares.nextcloud-headers.headers.STSSeconds: "315360000"
      traefik.http.middlewares.nextcloud-headers.headers.forceSTSHeader: "true"
      traefik.http.middlewares.nextcloud-headers.headers.sslProxyHeaders.X-Forwarded-Proto: https

      # ???

      traefik.http.middlewares.nc-header.headers.referrerPolicy: no-referrer
      traefik.http.middlewares.nc-header.headers.browserXssFilter: "true"
      traefik.http.middlewares.nc-header.headers.customRequestHeaders.X-Forwarded-Proto: https

      # from https://docs.nextcloud.com/server/25/admin_manual/configuration_server/reverse_proxy_configuration.html
      traefik.http.middlewares.nextcloud-redirectregex1.redirectregex.permanent: "true"
      traefik.http.middlewares.nextcloud-redirectregex1.redirectregex.regex: /.well-known/(card|cal)dav
      traefik.http.middlewares.nextcloud-redirectregex1.redirectregex.replacement: /remote.php/dav/

      # middlewares for routers
      traefik.http.routers.nextcloud-web.middlewares: nextcloud-redirect-to-https
      traefik.http.routers.nextcloud-web-secure.middlewares: >
        nextcloud-redirectregex1,nextcloud-ratelimit,nextcloud-compress,nextcloud-redirect-to-https,nextcloud-headers
      # Watchtower
      com.centurylinklabs.watchtower.enable: "true"
    restart_policy: unless-stopped
