- name: Create mqtt folders
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    recurse: true
    mode: "{{ docker_compose_directory_mask }}"
    owner: "{{ docker_user.name }}"
    group: "{{ docker_user.name }}"
  with_items: "{{ mosquitto_dirs }}"
  become: true

- name: Copy mosquitto.conf
  ansible.builtin.copy:
    src: files/mosquitto.conf
    dest: "{{ mosquitto_config_dir }}/config"
    mode: "{{ docker_compose_file_mask }}"
    owner: "{{ docker_user.name }}"
    group: "{{ docker_user.name }}"
  become: true

- name: Create mosquitto.passwd
  ansible.builtin.file:
    path: "{{ mosquitto_config_dir }}/config/mosquitto.passwd"
    state: touch
    access_time: preserve
    modification_time: preserve
    mode: "{{ docker_compose_file_mask }}"
    owner: "{{ docker_user.name }}"
    group: "{{ docker_user.name }}"
  become: true

- name: Check if mosquitto.passwd is populated
  ansible.builtin.lineinfile:
    path: "{{ mosquitto_config_dir }}/config/mosquitto.passwd"
    regexp: ^mosquitto.*$
    state: absent
  register: mosquitto_passwd_present
  changed_when: not mosquitto_passwd_present.changed
  check_mode: true
  notify:
    - Generate mosquitto password
  become: true

- name: Make sure the mosquitto container is created and running
  community.docker.docker_container:
    name: mosquitto
    image: eclipse-mosquitto:{{ mosquitto_version }}
    pull: true
    networks:
      - name: traefik
    state: started
    user: "{{ docker_user.id }}:{{ docker_user.id }}"
    volumes:
      - "{{ mosquitto_config_dir }}/config:/mosquitto/config"
      - "{{ mosquitto_config_dir }}/data:/mosquitto/data"
      - "{{ mosquitto_config_dir }}/log:/mosquitto/log"
      - /etc/localtime:/etc/localtime:ro
    env:
      TZ: "{{ timezone }}"
    labels:
      traefik.enable: "true"
      traefik.docker.network: traefik
      # routers
      traefik.tcp.services.mqtt.loadbalancer.server.port: "{{ mosquitto_port }}"
      traefik.tcp.services.mqtt_websocket.loadbalancer.server.port: "{{ mosquitto_websocket_port }}"
      traefik.tcp.routers.tcpr_mqtt.entrypoints: mqtt
      traefik.tcp.routers.tcpr_mqtt.rule: HostSNI(`*`)
      traefik.tcp.routers.tcpr_mqtt.service: mqtt
      traefik.tcp.routers.tcpr_mqtt_websocket.entrypoints: mqtt_websocket
      traefik.tcp.routers.tcpr_mqtt_websocket.rule: HostSNI(`*`)
      traefik.tcp.routers.tcpr_mqtt_websocket.service: mqtt_websocket
    restart_policy: unless-stopped
